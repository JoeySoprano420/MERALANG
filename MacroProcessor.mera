capsule MacroProcessor {
    import Parser

    var macros: dict<string, list<Parser.Instruction>> = {}

    // Define macro with name and body lines
    func define_macro(name: string, body: string) {
        val old_tokens = Lexer.tokens
        Lexer.tokens = []
        Lexer.current_line = 1
        Lexer.tokenize(body)
        Parser.instructions = []
        Parser.parse()
        macros[name] = Parser.instructions.clone()
        Lexer.tokens = old_tokens
    }

    // Expand macros in instruction list
    func expand_macros() {
        var expanded = []
        for instr in Parser.instructions {
            if macros.contains_key(instr.mnemonic) {
                // Macro expansion - for simplicity, no parameters in this example
                expanded.extend(macros[instr.mnemonic])
            } else {
                expanded.append(instr)
            }
        }
        Parser.instructions = expanded
    }
}
