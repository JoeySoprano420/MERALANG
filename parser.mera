capsule Parser {
    import Lexer

    struct Instruction {
        mnemonic: string
        operands: list<string>
        line: int
    }

    struct Label {
        name: string
        address: int
    }

    var instructions: list<Instruction> = []
    var labels: dict<string, Label> = {}

    func parse() {
        while true {
            val token = Lexer.peek()
            if token == null {
                break
            }
            if token.ends_with(":") {
                val label_name = token.substr(0, token.length - 1)
                Lexer.consume()
                if labels.contains_key(label_name) {
                    error("Duplicate label: " + label_name)
                }
                labels[label_name] = Label{name: label_name, address: -1}
            } else if token.starts_with(".") {
                // Directive (not implemented in this example)
                Lexer.consume()
                // Optionally parse directive operands
            } else {
                // Parse instruction mnemonic
                val mnemonic = Lexer.consume()!.to_lower()
                val operands = []
                var expect_comma = false
                while true {
                    val next_tok = Lexer.peek()
                    if next_tok == null || next_tok == "" || next_tok == "\n" {
                        break
                    }
                    if next_tok == "," {
                        if !expect_comma {
                            error("Unexpected comma")
                        }
                        Lexer.consume()
                        expect_comma = false
                        continue
                    }
                    if expect_comma {
                        error("Expected comma")
                    }
                    val op = Lexer.consume()!
                    operands.append(op)
                    expect_comma = true
                }
                instructions.append(Instruction{mnemonic: mnemonic, operands: operands, line: Lexer.current_line})
            }
        }
    }
}
